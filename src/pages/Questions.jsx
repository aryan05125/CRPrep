import React, { useState } from "react";
import { useParams } from "react-router-dom";
import { FaChevronDown, FaChevronUp } from "react-icons/fa";

// Sample question bank
    const questionBank = {
        html: [
                { q: "What is HTML?", a: "HTML stands for HyperText Markup Language. It structures web pages." },
                { q: "What is DOCTYPE?", a: "It declares the HTML version to the browser." },
                { q: "What are HTML tags?", a: "HTML tags are keywords used to define elements in a document." },
                { q: "What is a semantic tag?", a: "Tags that clearly describe their meaning, like <article> and <section>." },
                { q: "What is the <head> tag used for?", a: "It contains metadata, links to stylesheets, and other head elements." },
                { q: "What is the <body> tag used for?", a: "It contains the content visible on the web page." },
                { q: "What is the use of <meta> tag?", a: "To define metadata like charset, author, and viewport." },
                { q: "What is the difference between <div> and <span>?", a: "<div> is block-level; <span> is inline." },
                { q: "How to insert an image in HTML?", a: "Using the <img> tag with src and alt attributes." },
                { q: "How to create a hyperlink?", a: "Using the <a> tag with href attribute." },
                { q: "What is the purpose of alt attribute in <img>?", a: "It provides alternate text for the image." },
                { q: "What is the difference between id and class?", a: "id is unique; class can be reused." },
                { q: "What is an iframe?", a: "An iframe embeds another HTML page within the current page." },
                { q: "What are void elements?", a: "Elements that do not have closing tags like <br>, <img>, <hr>." },
                { q: "What is the use of <form> tag?", a: "To collect user input via controls like input, select, textarea." },
                { q: "How to make a list in HTML?", a: "Use <ul>, <ol>, and <li> tags." },
                { q: "What is the difference between <ul> and <ol>?", a: "<ul> is unordered; <ol> is ordered." },
                { q: "What is HTML5?", a: "The latest version of HTML with new features like video, audio, and canvas." },
                { q: "What is a block-level element?", a: "An element that starts on a new line and spans full width." },
                { q: "What is an inline element?", a: "An element that does not start on a new line." },
                { q: "What is the <nav> tag?", a: "It defines navigation links." },
                { q: "What is the <section> tag used for?", a: "To define a section in a document." },
                { q: "What is the <article> tag?", a: "To represent a self-contained piece of content." },
                { q: "What is the <aside> tag?", a: "It defines content aside from the main content." },
                { q: "How to include JavaScript in HTML?", a: "Using the <script> tag." },
                { q: "How to include CSS in HTML?", a: "Using the <style> tag or <link> tag." },
                { q: "What is the <table> tag?", a: "Used to define a table." },
                { q: "What are the components of a table?", a: "<table>, <tr>, <td>, <th>." },
                { q: "What is the use of <label> tag?", a: "It defines a label for input elements." },
                { q: "How to create a checkbox?", a: "Using <input type='checkbox'>." },
                { q: "How to create a radio button?", a: "Using <input type='radio'>." },
                { q: "How to create a dropdown list?", a: "Using <select> and <option> tags." },
                { q: "What is placeholder in input?", a: "It provides a hint to the user." },
                { q: "How to create a button?", a: "Using the <button> or <input type='button'> tag." },
                { q: "What is the <br> tag used for?", a: "It inserts a line break." },
                { q: "What is the <hr> tag?", a: "It defines a thematic break in the content." },
                { q: "How to create a comment in HTML?", a: "<!-- This is a comment -->" },
                { q: "What is the <strong> tag?", a: "It defines strong importance (bold)." },
                { q: "What is the <em> tag?", a: "It defines emphasized text (italic)." },
                { q: "How to create headings?", a: "Using <h1> to <h6> tags." },
                { q: "What is the difference between <b> and <strong>?", a: "<strong> has semantic meaning, <b> does not." },
                { q: "How to embed a video?", a: "Using the <video> tag." },
                { q: "How to embed audio?", a: "Using the <audio> tag." },
                { q: "What is the <canvas> tag?", a: "It is used to draw graphics via JavaScript." },
                { q: "What is the use of <input> tag?", a: "To get input from the user." },
                { q: "What is the accept attribute in file input?", a: "It specifies the types of files that can be selected." },
                { q: "What is the role of accessibility in HTML?", a: "To make content usable for all users, including those with disabilities." },
                { q: "What are data-* attributes?", a: "They store custom data private to the page or application." },
                { q: "What is the difference between <script> at head and body?", a: "Head scripts block rendering; body scripts are better for performance." },
                { q: "What is defer in script tag?", a: "It defers script execution until after the HTML document is parsed." }
              
        ],
        css: [
            { q: "What is CSS?", a: "CSS stands for Cascading Style Sheets. It is used to style HTML elements." },
            { q: "What are the types of CSS?", a: "Inline, Internal, and External CSS." },
            { q: "What is the syntax of CSS?", a: "selector { property: value; }" },
            { q: "What is the difference between class and ID in CSS?", a: "ID is unique and starts with #, class is reusable and starts with ." },
            { q: "What is specificity in CSS?", a: "Specificity determines which style is applied when multiple rules match." },
            { q: "How to include external CSS?", a: "Using the <link> tag in HTML head." },
            { q: "What is the Box Model in CSS?", a: "It includes content, padding, border, and margin." },
            { q: "What is z-index in CSS?", a: "It controls the stack order of elements." },
            { q: "What is the difference between relative and absolute positioning?", a: "Relative is based on its normal position, absolute is based on nearest positioned ancestor." },
            { q: "What is float in CSS?", a: "Float is used to position elements to the left or right." },
            { q: "How to center a div using CSS?", a: "Use margin: auto with a fixed width or flexbox." },
            { q: "What is the use of !important in CSS?", a: "It forces a style to apply, overriding other rules." },
            { q: "How to apply styles to multiple elements?", a: "Separate selectors with commas." },
            { q: "What are pseudo-classes in CSS?", a: "They define the special state of an element like :hover." },
            { q: "What are pseudo-elements?", a: "They allow styling parts of elements, like ::before and ::after." },
            { q: "What is a media query?", a: "Used for responsive design based on screen size." },
            { q: "What is the difference between em and rem units?", a: "em is relative to parent, rem is relative to root." },
            { q: "What is the default position of an element in CSS?", a: "Static." },
            { q: "What is a CSS transition?", a: "It allows smooth changes between styles." },
            { q: "What is the difference between visibility:hidden and display:none?", a: "hidden hides but keeps space, none removes from layout." },
            { q: "What is a CSS grid?", a: "A layout system for arranging items in rows and columns." },
            { q: "What is flexbox?", a: "A layout model for arranging items in a row or column with flexibility." },
            { q: "What is the difference between inline and block elements?", a: "Block takes full width, inline only necessary width." },
            { q: "What is inheritance in CSS?", a: "Some properties are inherited by child elements." },
            { q: "How to make a website responsive using CSS?", a: "Using media queries, flexible units, and layout techniques." },
            { q: "What is a CSS variable?", a: "A custom property defined using --name syntax." },
            { q: "What is opacity in CSS?", a: "It controls the transparency of an element." },
            { q: "How do you clear floats?", a: "Use clear: both or clearfix technique." },
            { q: "What is a shorthand property in CSS?", a: "A property that sets multiple values at once, like margin." },
            { q: "What is the difference between min-width and max-width?", a: "min-width sets the minimum size, max-width sets the maximum." },
            { q: "What is position: sticky?", a: "An element sticks within its container when scrolling." },
            { q: "What is the difference between px, %, em, and rem?", a: "Different units of measurement in CSS." },
            { q: "What is a keyframe animation?", a: "It defines the intermediate steps of an animation." },
            { q: "What is the default value of position?", a: "Static." },
            { q: "How to hide an element in CSS?", a: "Use display: none or visibility: hidden." },
            { q: "What is overflow in CSS?", a: "It defines how content is handled if it overflows the element." },
            { q: "What is the difference between inline-block and block?", a: "Inline-block allows setting width/height, block starts on new line." },
            { q: "What is the use of calc() in CSS?", a: "It allows mathematical expressions in property values." },
            { q: "What is a pseudo-selector?", a: "It styles an element based on its state or position." },
            { q: "What is object-fit?", a: "Defines how an element like <img> fits its container." },
            { q: "How to apply a background image in CSS?", a: "Using background-image property." },
            { q: "What is the use of nth-child selector?", a: "It selects elements based on their order." },
            { q: "What is outline in CSS?", a: "It is a line drawn outside the element’s border." },
            { q: "What is the stacking context?", a: "It determines the order of overlapping elements." },
            { q: "How to make a fixed header?", a: "Use position: fixed with top: 0." },
            { q: "What is the purpose of transform in CSS?", a: "Applies transformations like rotate, scale, etc." },
            { q: "What is line-height?", a: "It controls the vertical space between lines of text." },
            { q: "What is word-wrap?", a: "It breaks long words to fit within container." },
            { q: "What is the difference between visibility and opacity?", a: "Visibility hides but keeps space, opacity changes transparency." },
            { q: "What is pointer-events in CSS?", a: "Controls if an element can respond to pointer events." },
        ],
        javascript: [
            { q: "What is JavaScript?", a: "It is a scripting language for creating dynamic web pages." },
            { q: "Explain closures.", a: "A closure is a function that remembers its outer scope." },
            { q: "What is the difference between var, let, and const?", a: "`var` is function scoped, `let` and `const` are block scoped." },
            { q: "What is hoisting in JavaScript?", a: "It is JavaScript's default behavior of moving declarations to the top." },
            { q: "What are arrow functions?", a: "Shorter syntax for function expressions, and they don't bind `this`." },
            { q: "What is the difference between == and ===?", a: "`==` checks value, `===` checks value and type." },
            { q: "What is event bubbling?", a: "Events propagate from child to parent unless stopped." },
            { q: "What is a promise?", a: "An object that represents the eventual completion or failure of an async operation." },
            { q: "What is async/await?", a: "Syntax for writing promises in a more readable way." },
            { q: "What is a callback function?", a: "A function passed as an argument to another function." },
            { q: "What is the DOM?", a: "Document Object Model, represents HTML as objects." },
            { q: "What is JSON?", a: "JavaScript Object Notation, a format for data exchange." },
            { q: "How to parse JSON in JavaScript?", a: "Using `JSON.parse()`." },
            { q: "What is NaN?", a: "Not a Number. It indicates a non-numeric value." },
            { q: "What is the use of isNaN()?", a: "To check whether a value is NaN." },
            { q: "What is a prototype?", a: "An object from which other objects inherit properties." },
            { q: "What is an IIFE?", a: "Immediately Invoked Function Expression." },
            { q: "What is the use of `this`?", a: "It refers to the object that is executing the current function." },
            { q: "What are template literals?", a: "Strings using backticks that allow interpolation `${}`." },
            { q: "What is destructuring?", a: "Extracting values from arrays or objects into variables." },
            { q: "What is spread operator?", a: "Used to expand iterable into individual elements (...)." },
            { q: "What is rest parameter?", a: "Collects multiple arguments into a single array (...args)." },
            { q: "What are JavaScript data types?", a: "String, Number, Boolean, Object, Undefined, Null, Symbol, BigInt." },
            { q: "What is the difference between null and undefined?", a: "`null` is intentional absence, `undefined` is unassigned." },
            { q: "What is type coercion?", a: "Automatic conversion between types." },
            { q: "How to prevent default behavior in events?", a: "Use `event.preventDefault()`." },
            { q: "What is debounce?", a: "A technique to limit the rate a function is called." },
            { q: "What is throttle?", a: "Limits function execution to once per specified time." },
            { q: "What is the use of `setTimeout()`?", a: "To delay function execution by a set time." },
            { q: "What is `setInterval()`?", a: "To run a function repeatedly with a delay." },
            { q: "What is event delegation?", a: "Using a parent to handle events for its children." },
            { q: "What is the difference between call, apply, and bind?", a: "`call` and `apply` invoke functions, `bind` returns new function." },
            { q: "What is a shallow copy?", a: "A copy of the object with same reference to nested objects." },
            { q: "What is a deep copy?", a: "A full independent clone including nested objects." },
            { q: "How to check if a variable is array?", a: "Use `Array.isArray(variable)`." },
            { q: "What is the difference between map and forEach?", a: "`map` returns new array, `forEach` doesn't." },
            { q: "What is localStorage?", a: "Stores data with no expiration in browser." },
            { q: "What is sessionStorage?", a: "Stores data for a single session." },
            { q: "What is the event loop?", a: "Handles execution of multiple chunks of code in a non-blocking way." },
            { q: "What are microtasks and macrotasks?", a: "Types of asynchronous tasks managed by event loop." },
            { q: "What is strict mode?", a: "Makes code errors more visible by changing some silent errors to throw." },
            { q: "How to handle errors in JS?", a: "Using `try`, `catch`, and `finally` blocks." },
            { q: "What is `typeof`?", a: "Returns the type of a variable." },
            { q: "What are getter and setter?", a: "Functions that get or set object property values." },
            { q: "What is a generator function?", a: "A function that can be paused and resumed using `yield`." },
            { q: "What are modules in JavaScript?", a: "Reusable pieces of code split into different files." },
            { q: "What is the difference between function and arrow function?", a: "Arrow functions don’t have their own `this`." },
            { q: "What is memoization?", a: "Caching function results for better performance." },
            { q: "What is Symbol in JS?", a: "A unique and immutable data type used as object keys." },
            { q: "How to handle async errors?", a: "Using `try...catch` or `.catch()` with promises." }
        ],
        react: [
          
            { q: "What is JSX?", a: "JSX stands for JavaScript XML. It allows HTML in React." },
            { q: "What is useEffect?", a: "It is used for side effects in React components." },
            { q: "What is React?", a: "React is a JavaScript library for building user interfaces." },
            { q: "What is a component?", a: "A reusable piece of UI in React." },
            { q: "What is the difference between functional and class components?", a: "Functional components use hooks, class components use lifecycle methods." },
            { q: "What is state in React?", a: "State is a built-in object for storing component data." },
            { q: "What is props in React?", a: "Props are used to pass data between components." },
            { q: "What are hooks?", a: "Hooks are functions that let you use state and other React features in functional components." },
            { q: "What is useState?", a: "A hook to add state to functional components." },
            { q: "What is virtual DOM?", a: "A lightweight copy of the real DOM used for efficient updates." },
            { q: "What is reconciliation?", a: "The process of updating the DOM when data changes." },
            { q: "What is a key in React?", a: "A unique identifier used for list rendering." },
            { q: "What is lifting state up?", a: "Moving state to a common parent to share it between components." },
            { q: "What is context API?", a: "A way to pass data through the component tree without props." },
            { q: "What is useContext?", a: "A hook to use context in functional components." },
            { q: "What is useRef?", a: "A hook for referencing DOM elements or keeping mutable values." },
            { q: "What is useMemo?", a: "It memorizes expensive function results." },
            { q: "What is useCallback?", a: "It returns a memoized callback function." },
            { q: "What are controlled components?", a: "Form elements whose value is controlled by React state." },
            { q: "What are uncontrolled components?", a: "Form elements handled by the DOM itself." },
            { q: "What is Prop Drilling?", a: "Passing data through multiple layers of components." },
            { q: "What is React Router?", a: "A library for routing in React apps." },
            { q: "What is lazy loading?", a: "Loading components only when they are needed." },
            { q: "What is Suspense?", a: "Used to wrap lazy components and show fallback content." },
            { q: "What is error boundary?", a: "A component that catches JavaScript errors in child components." },
            { q: "What is useReducer?", a: "A hook for managing complex state logic." },
            { q: "What is a fragment in React?", a: "A wrapper that doesn’t render extra DOM." },
            { q: "What is the difference between useEffect and useLayoutEffect?", a: "`useLayoutEffect` runs synchronously after all DOM mutations." },
            { q: "What is React.StrictMode?", a: "A tool for highlighting potential problems." },
            { q: "How to optimize performance in React?", a: "Using memo, lazy loading, and avoiding unnecessary renders." },
            { q: "What is React.memo?", a: "A HOC to prevent unnecessary re-renders." },
            { q: "What is forwardRef?", a: "It forwards a ref to a child component." },
            { q: "What is the difference between state and props?", a: "State is internal and mutable, props are external and immutable." },
            { q: "What are higher-order components (HOC)?", a: "Functions that take a component and return a new one." },
            { q: "What is Redux?", a: "A state management library for React." },
            { q: "What is useSelector?", a: "Used to access Redux state in components." },
            { q: "What is useDispatch?", a: "Used to dispatch actions to Redux store." },
            { q: "What is an action in Redux?", a: "An object describing what happened." },
            { q: "What is a reducer in Redux?", a: "A function that returns new state based on action." },
            { q: "What is middleware in Redux?", a: "Enhances dispatching actions like for async calls." },
            { q: "What is server-side rendering (SSR)?", a: "Rendering React components on the server." },
            { q: "What is hydration in React?", a: "Attaching event listeners to server-rendered markup." },
            { q: "What is JSX transpilation?", a: "Converting JSX to JavaScript using Babel." },
            { q: "What is React DevTools?", a: "Browser extension to inspect React components." },
            { q: "What is the use of keys in lists?", a: "To identify which items have changed." },
            { q: "How do you handle forms in React?", a: "Using state for controlled components." },
            { q: "What is the difference between map and forEach in rendering?", a: "`map` returns elements, `forEach` does not." },
            { q: "What is create-react-app?", a: "A CLI tool to set up React apps quickly." },
            { q: "What is JSX?", a: "JavaScript XML - a syntax extension for writing HTML in JS." },
            { q: "What is the difference between SPA and MPA?", a: "SPA loads one HTML page, MPA loads multiple." }
        ],
        tailwind: [{ q: "What is Tailwind CSS?", a: "A utility-first CSS framework for fast UI development." },
            { q: "How to apply responsive design in Tailwind?", a: "Using breakpoints like `sm:`, `md:`, `lg:` etc." },
            { q: "What is a utility-first framework?", a: "A framework where you style using small, reusable utility classes." },
            { q: "How to center a div using Tailwind?", a: "Use `flex justify-center items-center`." },
            { q: "How to add custom colors in Tailwind?", a: "By extending the `theme` in `tailwind.config.js`." },
            { q: "What is `@apply` in Tailwind?", a: "Used in CSS to apply utility classes." },
            { q: "How to make text bold?", a: "Use `font-bold` class." },
            { q: "What does `mx-auto` do?", a: "It sets horizontal margins to auto for centering." },
            { q: "How to make a background image?", a: "Use `bg-[url('...')]`." },
            { q: "How to make a button hover effect?", a: "Use `hover:bg-color`." },
            { q: "What does `w-full` do?", a: "Sets element width to 100%." },
            { q: "How to add shadow?", a: "Use `shadow`, `shadow-lg`, etc." },
            { q: "How to round corners?", a: "Use `rounded`, `rounded-lg`, etc." },
            { q: "What is `z-10` used for?", a: "Sets the z-index to 10." },
            { q: "How to make a grid?", a: "Use `grid`, `grid-cols-2`, etc." },
            { q: "What does `space-x-4` mean?", a: "Adds horizontal spacing between children." },
            { q: "What is `flex` used for?", a: "To make the container flexible and use flexbox." },
            { q: "How to hide an element on small screen?", a: "Use `hidden sm:block`." },
            { q: "What does `p-4` mean?", a: "Adds padding of 1rem on all sides." },
            { q: "How to change text color?", a: "Use `text-red-500`, `text-white`, etc." },
            { q: "How to create a responsive layout?", a: "Use breakpoints like `md:flex`, `lg:grid-cols-4`, etc." },
            { q: "What is `container` class?", a: "It sets a max-width and centers the content." },
            { q: "What is the default config file name?", a: "`tailwind.config.js`" },
            { q: "How to install Tailwind via CDN?", a: "Use `<script src='https://cdn.tailwindcss.com'></script>`." },
            { q: "How to add hover effect?", a: "Prefix class with `hover:`." },
            { q: "How to apply opacity?", a: "Use `opacity-50`, `opacity-100`, etc." },
            { q: "How to use pseudo classes?", a: "Use variants like `hover:`, `focus:`." },
            { q: "How to make a fixed navbar?", a: "Use `fixed top-0`." },
            { q: "How to change font size?", a: "Use `text-sm`, `text-xl`, `text-3xl`, etc." },
            { q: "How to add margin?", a: "Use `m-4`, `mt-2`, `mb-1`, etc." },
            { q: "What is `gap-4` in grid?", a: "Adds space between grid rows and columns." },
            { q: "What does `overflow-hidden` do?", a: "Hides overflowing content." },
            { q: "How to animate elements?", a: "Use `transition`, `duration-300`, `ease-in-out`." },
            { q: "How to make a responsive navbar?", a: "Use flex and `hidden sm:block` for menu items." },
            { q: "How to darken the background?", a: "Use `bg-gray-900`, `bg-black`, etc." },
            { q: "How to make text uppercase?", a: "Use `uppercase`." },
            { q: "What is `divide-y` used for?", a: "Adds borders between vertical elements." },
            { q: "What is the use of `line-clamp`?", a: "To truncate multiline text with ellipsis." },
            { q: "How to control display property?", a: "Use `block`, `inline`, `flex`, `grid`, etc." },
            { q: "How to set height?", a: "Use `h-10`, `h-screen`, `h-full`, etc." },
            { q: "How to make an image responsive?", a: "Use `w-full h-auto`." },
            { q: "How to animate hover color?", a: "Use `transition-colors duration-300`." },
            { q: "How to conditionally apply classes?", a: "Use classnames or template literals in React." },
            { q: "How to disable a button?", a: "Use `disabled:opacity-50` and `cursor-not-allowed`." },
            { q: "What is `prose` class in Tailwind Typography?", a: "It styles long-form content like blog posts." },
            { q: "How to extend themes?", a: "Use `extend` inside `theme` in config file." },
            { q: "What is arbitrary value in Tailwind?", a: "Custom values like `bg-[#1a202c]` or `w-[50%]`." },
            { q: "What is the purge option used for?", a: "To remove unused styles in production." },
            { q: "How to integrate Tailwind with React?", a: "Install Tailwind via npm and import CSS in `index.css`." }
        ],
        node: [
            { q: "What is Node.js?", a: "Node.js is a server-side runtime using V8 engine." },
            { q: "What is npm?", a: "Node Package Manager to manage dependencies." },
            { q: "What is the use of `package.json`?", a: "It stores metadata and dependencies for a Node project." },
            { q: "What is a module in Node.js?", a: "A module is a reusable block of code." },
            { q: "What is CommonJS?", a: "Module system used in Node.js using `require` and `module.exports`." },
            { q: "Difference between require and import?", a: "`require` is CommonJS; `import` is ES6." },
            { q: "What is the purpose of `exports`?", a: "To expose functions/variables from a module." },
            { q: "How to create a server in Node.js?", a: "Using `http.createServer()`." },
            { q: "What is an event loop?", a: "It handles async operations in Node.js." },
            { q: "What is callback?", a: "A function passed as an argument to another function." },
            { q: "What is async/await?", a: "Syntax for handling asynchronous operations in a readable way." },
            { q: "What is an event emitter?", a: "Object that emits named events and listens using `on()`." },
            { q: "What is the `fs` module?", a: "Used for file system operations like read, write, etc." },
            { q: "How to read a file in Node.js?", a: "Using `fs.readFile()` or `fs.readFileSync()`." },
            { q: "What is middleware?", a: "Functions executed during the request-response cycle." },
            { q: "What is `process` object?", a: "It provides information and control over the Node process." },
            { q: "What is `__dirname`?", a: "It returns the directory name of the current module." },
            { q: "What is `setTimeout`?", a: "Executes code after a delay." },
            { q: "What is a buffer in Node.js?", a: "Temporary memory for binary data manipulation." },
            { q: "What is a stream?", a: "Data handled in chunks for efficiency." },
            { q: "Difference between read stream and write stream?", a: "Read stream reads data, write stream writes data." },
            { q: "What is cluster module?", a: "Used to spawn child processes for load balancing." },
            { q: "What is `child_process` module?", a: "Spawns child processes to execute commands." },
            { q: "What is REPL?", a: "Read Eval Print Loop - Node interactive shell." },
            { q: "What is the difference between synchronous and asynchronous?", a: "Sync blocks code execution; async does not." },
            { q: "What is `cors` in Node?", a: "Middleware for enabling Cross-Origin Resource Sharing." },
            { q: "What is environment variable?", a: "External variable set using `process.env`." },
            { q: "How to handle exceptions in Node.js?", a: "Using try-catch or `.catch()` in promises." },
            { q: "What is a promise?", a: "Object representing future completion or failure." },
            { q: "How to handle errors in callbacks?", a: "Check first argument for error." },
            { q: "What is `nodemon`?", a: "Tool to auto-restart Node server on file changes." },
            { q: "What is Express.js?", a: "Minimal and flexible Node.js web application framework." },
            { q: "What is `dotenv`?", a: "Package to load environment variables from `.env` file." },
            { q: "What is routing in Node.js?", a: "Mapping URLs to specific handlers." },
            { q: "How to send JSON data in Node.js?", a: "Use `res.json()` in Express." },
            { q: "How to parse JSON body?", a: "Use `express.json()` middleware." },
            { q: "What is rate limiting?", a: "Controlling request rate to prevent abuse." },
            { q: "What is helmet in Node?", a: "Middleware to secure headers." },
            { q: "How to serve static files?", a: "Use `express.static()` in Express." },
            { q: "What is cookie-parser?", a: "Middleware to parse cookies." },
            { q: "How to connect MongoDB in Node.js?", a: "Using `mongoose` or `mongodb` driver." },
            { q: "What is body-parser?", a: "Middleware to parse incoming request bodies." },
            { q: "What is HTTP module?", a: "Core module to create server and handle HTTP requests." },
            { q: "What is the difference between PUT and PATCH?", a: "PUT replaces resource, PATCH updates part of it." },
            { q: "What is `next()` in Express?", a: "Passes control to next middleware function." },
            { q: "How to create REST API in Node.js?", a: "Using routes and HTTP methods in Express." },
            { q: "What is rate limiting?", a: "Technique to limit number of requests per user/time." },
            { q: "What is `res.send()` vs `res.json()`?", a: "`send()` sends any type, `json()` sends JSON." },
            { q: "What is `await` used for?", a: "Waits for a promise to resolve." },
            { q: "What is `require.resolve()`?", a: "Returns the resolved path of a module." },
            { q: "What is the latest version of Node.js?", a: "Depends on release; use `node -v` to check." }
          
        ],
        express: [
            { q: "What is Express.js?", a: "Minimal web framework for Node.js." },
            { q: "How to handle routes in Express?", a: "Using app.get(), app.post(), etc." },
            { q: "What is middleware in Express?", a: "Functions that run before final request handler." },
            { q: "What is `app.listen()` used for?", a: "To bind and listen for connections on a port." },
            { q: "How to send JSON response?", a: "Using res.json() method." },
            { q: "How to handle form data in Express?", a: "Using express.urlencoded() middleware." },
            { q: "What is `next()`?", a: "Passes control to the next middleware." },
            { q: "How to serve static files?", a: "Using express.static() middleware." },
            { q: "What is Router in Express?", a: "Mini instance of middleware and routing." },
            { q: "How to handle 404 errors?", a: "By adding a middleware at the end with `res.status(404)`." },
            { q: "How to catch all errors?", a: "Using error-handling middleware with 4 parameters." },
            { q: "What is res.send()?", a: "Sends a response of various types." },
            { q: "What is res.end()?", a: "Ends the response process." },
            { q: "How to handle cookies?", a: "Using `cookie-parser` middleware." },
            { q: "How to use request params?", a: "Using req.params." },
            { q: "How to use query strings?", a: "Using req.query." },
            { q: "How to parse JSON body?", a: "Using express.json() middleware." },
            { q: "How to create modular routes?", a: "Using express.Router() in separate files." },
            { q: "How to use Helmet?", a: "By requiring and using helmet() as middleware." },
            { q: "How to enable CORS?", a: "Using the `cors` package." },
            { q: "What is req.body?", a: "Contains parsed request body." },
            { q: "How to make REST API in Express?", a: "Using HTTP methods like GET, POST, PUT, DELETE." },
            { q: "How to redirect in Express?", a: "Using res.redirect() method." },
            { q: "How to use status codes?", a: "res.status(code).send(message)" },
            { q: "What is the default port?", a: "Commonly 3000, but can be changed." },
            { q: "How to validate input?", a: "Using libraries like express-validator or Joi." },
            { q: "How to log requests?", a: "Using morgan or custom middleware." },
            { q: "What is the role of app.use()?", a: "Mounts middleware for all routes." },
            { q: "How to handle file uploads?", a: "Using multer package." },
            { q: "What is a RESTful API?", a: "API that uses HTTP methods and URIs." },
            { q: "What is `req.headers`?", a: "Contains request headers." },
            { q: "How to get client IP?", a: "Using req.ip" },
            { q: "What is response chaining?", a: "Using methods like res.status().json()" },
            { q: "What is express-generator?", a: "Tool to scaffold Express app structure." },
            { q: "What is app.all()?", a: "Handles all HTTP methods." },
            { q: "How to use sessions?", a: "Using express-session middleware." },
            { q: "What is CSRF protection?", a: "Securing forms using tokens (with csurf middleware)." },
            { q: "What is rate limiting?", a: "Controlling number of requests per user (express-rate-limit)." },
            { q: "How to use environment variables?", a: "Using dotenv package and process.env." },
            { q: "What is app.set()?", a: "Sets application-level properties." },
            { q: "What is app.get('env')?", a: "Returns environment mode (development/production)." },
            { q: "How to handle nested routes?", a: "Using Router with nested paths." },
            { q: "What is req.originalUrl?", a: "Original request URL before any changes." },
            { q: "What is req.baseUrl?", a: "The base URL path on which router was mounted." },
            { q: "How to handle multiple middleware?", a: "Pass multiple functions in app.use or routes." },
            { q: "What is app.disable()?", a: "Disables settings (like 'x-powered-by')." },
            { q: "What is compression middleware?", a: "Gzip compresses responses to reduce payload size." },
            { q: "How to test Express APIs?", a: "Using tools like Postman or Jest with Supertest." },
            { q: "How to return custom error message?", a: "Use res.status().json({error: 'msg'})" },
            { q: "What is the use of req.app?", a: "Access the main Express application instance." },
        ],
        python: [
          { q: "What is Python?", a: "Python is a high-level programming language." },
  { q: "What are Python lists?", a: "Ordered, mutable collection of items." },
  { q: "What is a tuple?", a: "An immutable, ordered collection of items." },
  { q: "What is a dictionary?", a: "A key-value pair collection." },
  { q: "What is PEP 8?", a: "Style guide for Python code." },
  { q: "What is indentation in Python?", a: "Whitespace used to define code blocks." },
  { q: "What is a function?", a: "Reusable block of code to perform a task." },
  { q: "What is a lambda function?", a: "Anonymous one-line function." },
  { q: "What is the difference between `is` and `==`?", a: "`is` compares identity, `==` compares values." },
  { q: "What are Python modules?", a: "Files containing Python code (functions, classes)." },
  { q: "What is `__init__.py`?", a: "Marks a directory as a Python package." },
  { q: "What is a virtual environment?", a: "Isolated environment to manage project dependencies." },
  { q: "How to install packages in Python?", a: "Using pip, e.g., `pip install package`." },
  { q: "What is `None` in Python?", a: "Represents the absence of a value." },
  { q: "What is typecasting?", a: "Converting one data type to another." },
  { q: "What is a list comprehension?", a: "Concise way to create lists." },
  { q: "What is a generator?", a: "Function that returns an iterator using `yield`." },
  { q: "What is a decorator?", a: "Function that modifies the behavior of another function." },
  { q: "What is the difference between `append()` and `extend()`?", a: "`append()` adds one item, `extend()` merges another iterable." },
  { q: "What are Python exceptions?", a: "Errors detected during execution." },
  { q: "What is `try-except` block?", a: "Used for exception handling." },
  { q: "What is the use of `pass`?", a: "A null statement that does nothing." },
  { q: "What is recursion?", a: "Function calling itself." },
  { q: "What is slicing in Python?", a: "Extracting a portion of a list or string." },
  { q: "What are Python strings?", a: "Immutable sequences of characters." },
  { q: "What is `*args` and `**kwargs`?", a: "Used to pass variable number of arguments." },
  { q: "What is an iterator?", a: "Object with `__next__()` method." },
  { q: "What is a class?", a: "Blueprint for creating objects." },
  { q: "What is an object?", a: "Instance of a class." },
  { q: "What is inheritance?", a: "A class deriving from another class." },
  { q: "What is `self` in Python?", a: "Refers to the current instance of the class." },
  { q: "What is polymorphism?", a: "Ability to take many forms." },
  { q: "What is encapsulation?", a: "Hiding internal details of a class." },
  { q: "What is abstraction?", a: "Hiding implementation and showing only essential features." },
  { q: "What are the file modes in Python?", a: "'r', 'w', 'a', 'rb', 'wb', etc." },
  { q: "How to read a file in Python?", a: "Using `open()` and `read()` functions." },
  { q: "What is the difference between `read()` and `readlines()`?", a: "`read()` reads all, `readlines()` returns a list." },
  { q: "What is the `with` statement?", a: "Used to wrap the execution of a block with context management." },
  { q: "What is `map()` function?", a: "Applies a function to every item in iterable." },
  { q: "What is `filter()` function?", a: "Filters items based on a function." },
  { q: "What is `zip()`?", a: "Combines multiple iterables into tuples." },
  { q: "What is a set in Python?", a: "Unordered, unique collection of items." },
  { q: "How to remove duplicates from a list?", a: "Convert list to set." },
  { q: "What is `global` keyword?", a: "Used to declare global variables." },
  { q: "What is `del` keyword?", a: "Deletes objects." },
  { q: "What is the difference between `deepcopy()` and `copy()`?", a: "`copy()` is shallow, `deepcopy()` copies nested objects." },
  { q: "What is Python's `id()` function?", a: "Returns the identity of an object." },
  { q: "What is the `enumerate()` function?", a: "Adds counter to an iterable." },
  { q: "What is the `all()` function?", a: "Returns True if all elements are true." },
  { q: "What is the `any()` function?", a: "Returns True if any element is true." },
        ],
        django: [
          { q: "What is Django?", a: "High-level Python web framework for rapid development." },
          { q: "What is ORM in Django?", a: "Object Relational Mapping to interact with DB." },
          { q: "What is a Django project?", a: "A collection of settings for an instance of Django." },
          { q: "What is a Django app?", a: "A web application that does something, e.g., blog, auth." },
          { q: "How do you create a Django project?", a: "`django-admin startproject projectname`." },
          { q: "How do you create a Django app?", a: "`python manage.py startapp appname`." },
          { q: "What is `manage.py`?", a: "Command-line utility for managing Django projects." },
          { q: "What is `settings.py`?", a: "Contains all project configuration settings." },
          { q: "What is `urls.py`?", a: "Used to define URL routing." },
          { q: "What is `views.py`?", a: "Contains functions or classes that handle requests." },
          { q: "What is a model in Django?", a: "Python class that maps to a database table." },
          { q: "What is a migration in Django?", a: "Way to apply changes to the database schema." },
          { q: "How do you apply migrations?", a: "`python manage.py makemigrations` and `migrate`." },
          { q: "What is the admin interface?", a: "Auto-generated web UI for models." },
          { q: "How to register a model in admin?", a: "Using `admin.site.register(Model)`." },
          { q: "What are Django templates?", a: "HTML files with dynamic placeholders." },
          { q: "What is context in templates?", a: "Data passed from view to template." },
          { q: "What is a slug field?", a: "Used for SEO-friendly URLs." },
          { q: "What is a form in Django?", a: "Used to handle user input." },
          { q: "What is `ModelForm`?", a: "Form automatically created from model." },
          { q: "What is CSRF?", a: "Cross-Site Request Forgery protection." },
          { q: "How do you protect against CSRF?", a: "Using `{% csrf_token %}` in forms." },
          { q: "What is a QuerySet?", a: "Collection of database queries." },
          { q: "How to filter QuerySets?", a: "`Model.objects.filter(field=value)`." },
          { q: "What is `get_object_or_404()`?", a: "Returns object or 404 error if not found." },
          { q: "What is middleware in Django?", a: "Hooks for processing request/response." },
          { q: "What is static file?", a: "CSS, JS, and image files." },
          { q: "How to serve static files?", a: "Use `STATIC_URL` and collectstatic." },
          { q: "What is the difference between `null=True` and `blank=True`?", a: "`null` is for DB, `blank` is for validation." },
          { q: "What is Django Rest Framework?", a: "Library to build RESTful APIs in Django." },
          { q: "What is a serializer?", a: "Converts complex data to JSON and back." },
          { q: "What is authentication in Django?", a: "Identifying users using username/password." },
          { q: "How to create a superuser?", a: "`python manage.py createsuperuser`." },
          { q: "How do you handle file uploads?", a: "Using `FileField` and `MEDIA_ROOT`." },
          { q: "What are signals in Django?", a: "Used to trigger actions on events like save/delete." },
          { q: "What is `request.user`?", a: "Gives the current logged-in user." },
          { q: "What is session in Django?", a: "Stores user data across requests." },
          { q: "What is caching?", a: "Storing output to improve performance." },
          { q: "What is a template tag?", a: "Logic inside templates like loops or conditions." },
          { q: "What is a custom template tag?", a: "User-defined tag to add custom logic in templates." },
          { q: "How to send email in Django?", a: "Using `send_mail()` function." },
          { q: "What is `reverse()`?", a: "Gets URL from view name." },
          { q: "How to define model relationships?", a: "Using `ForeignKey`, `OneToOneField`, `ManyToManyField`." },
          { q: "How do you paginate results?", a: "Use `Paginator` class." },
          { q: "What is `prefetch_related()`?", a: "Optimizes related object access." },
          { q: "What is `select_related()`?", a: "Reduces DB hits for foreign key relations." },
          { q: "What is `@login_required`?", a: "Decorator to restrict access to authenticated users." },
          { q: "How to use class-based views?", a: "Inherit from `View` or `TemplateView`." },
          { q: "What is a context processor?", a: "Function that adds context globally to templates." },
        ],
        fastapi: [
          { q: "What is FastAPI?", a: "Modern Python web framework for APIs." },
          { q: "Why use FastAPI?", a: "High performance, automatic docs, type hints." },
          { q: "What are key features of FastAPI?", a: "Fast, async support, auto docs, type checking." },
          { q: "Which ASGI server is commonly used with FastAPI?", a: "Uvicorn." },
          { q: "What is ASGI?", a: "Asynchronous Server Gateway Interface." },
          { q: "How to install FastAPI?", a: "`pip install fastapi uvicorn`." },
          { q: "How to start a FastAPI server?", a: "`uvicorn main:app --reload`." },
          { q: "What is `@app.get()` in FastAPI?", a: "Route decorator for GET requests." },
          { q: "How to return JSON response?", a: "Simply return dict; FastAPI converts it to JSON." },
          { q: "How to create a POST route?", a: "Use `@app.post()` decorator." },
          { q: "How to get query parameters?", a: "Use function parameters with default values." },
          { q: "What is `Path` in FastAPI?", a: "Used for path parameters with validation." },
          { q: "What is `Query` in FastAPI?", a: "Used to define and validate query params." },
          { q: "What is `Body` in FastAPI?", a: "Used to extract and validate request body." },
          { q: "What is Pydantic?", a: "Library for data validation using Python types." },
          { q: "How to create a Pydantic model?", a: "Inherit from `BaseModel`." },
          { q: "What is automatic API documentation?", a: "Swagger UI and ReDoc auto generated." },
          { q: "How to handle validation errors?", a: "FastAPI returns automatic error response." },
          { q: "What is `status_code` used for?", a: "To define custom response status." },
          { q: "How to use request headers?", a: "Use `Header` dependency." },
          { q: "How to use cookies?", a: "Use `Cookie` dependency." },
          { q: "What is dependency injection?", a: "Passing shared logic via `Depends()`." },
          { q: "What is `Depends()`?", a: "Declare reusable logic like DB sessions, auth." },
          { q: "What are background tasks?", a: "Functions that run after response is sent." },
          { q: "How to implement background tasks?", a: "Use `BackgroundTasks` class." },
          { q: "What is middleware?", a: "Code that runs before/after each request." },
          { q: "How to add middleware?", a: "Use `@app.middleware()` decorator." },
          { q: "How to handle CORS?", a: "Use `CORSMiddleware` from `fastapi.middleware.cors`." },
          { q: "How to handle authentication?", a: "Use OAuth2PasswordBearer or JWT." },
          { q: "What is OAuth2PasswordBearer?", a: "Dependency to get token from request." },
          { q: "How to use JWT with FastAPI?", a: "Use `pyjwt` to generate/verify tokens." },
          { q: "How to upload files?", a: "Use `UploadFile` and `File`." },
          { q: "What is `Form` used for?", a: "To receive form data (not JSON)." },
          { q: "How to stream large files?", a: "Use `StreamingResponse`." },
          { q: "How to handle exceptions?", a: "Use `@app.exception_handler()`." },
          { q: "How to create custom exceptions?", a: "Raise `HTTPException(status_code=...)`." },
          { q: "What is the role of `BaseModel.dict()`?", a: "Convert model to dictionary." },
          { q: "What is the role of `BaseModel.json()`?", a: "Convert model to JSON string." },
          { q: "What is APIRouter?", a: "Modular way to split routes." },
          { q: "How to use APIRouter?", a: "Define router and `include_router()` in app." },
          { q: "What is `response_model`?", a: "Restricts and validates the output schema." },
          { q: "What is `tags` in route decorators?", a: "Used to group endpoints in docs." },
          { q: "How to run multiple apps?", a: "Mount sub-apps with `mount()`." },
          { q: "How to serve static files?", a: "Use `StaticFiles` from `starlette.staticfiles`." },
          { q: "How to test FastAPI app?", a: "Use `TestClient` from `fastapi.testclient`." },
          { q: "What is Starlette?", a: "FastAPI is built on top of Starlette." },
          { q: "What databases can FastAPI use?", a: "Any: PostgreSQL, MySQL, MongoDB etc." },
          { q: "Is FastAPI synchronous or asynchronous?", a: "Supports both." },
          { q: "How to use SQLAlchemy in FastAPI?", a: "With session dependency and models." },
          { q: "What is the alternative to Swagger UI?", a: "ReDoc." },
          { q: "How to return custom headers?", a: "Use `Response` object in function." },
        ],
      
        // Add similar question arrays for all other categories:
        mysql: [{ q: "What is MySQL?", a: "MySQL is an open-source relational database management system." },
          { q: "What is a table in MySQL?", a: "A table is a collection of related data organized in rows and columns." },
          { q: "What is a primary key?", a: "A primary key uniquely identifies each record in a table." },
          { q: "What is a foreign key?", a: "A foreign key is a field in one table that refers to the primary key in another table." },
          { q: "What is a database?", a: "A database is a collection of organized data stored electronically." },
          { q: "What is SQL?", a: "Structured Query Language used to interact with databases." },
          { q: "How to create a database?", a: "`CREATE DATABASE dbname;`" },
          { q: "How to create a table?", a: "`CREATE TABLE tablename (...);`" },
          { q: "How to insert data into a table?", a: "`INSERT INTO tablename VALUES (...);`" },
          { q: "How to fetch data from a table?", a: "`SELECT * FROM tablename;`" },
          { q: "What is the use of SELECT?", a: "To retrieve data from a database." },
          { q: "What is WHERE clause?", a: "Used to filter records based on condition." },
          { q: "What is JOIN?", a: "JOIN is used to combine rows from two or more tables." },
          { q: "Types of JOIN in MySQL?", a: "INNER, LEFT, RIGHT, FULL (not supported directly), CROSS." },
          { q: "What is an index?", a: "An index improves the speed of data retrieval." },
          { q: "How to add a primary key?", a: "`PRIMARY KEY (column_name)` in CREATE TABLE or ALTER TABLE." },
          { q: "How to delete a table?", a: "`DROP TABLE tablename;`" },
          { q: "How to delete a database?", a: "`DROP DATABASE dbname;`" },
          { q: "What is normalization?", a: "Organizing data to reduce redundancy." },
          { q: "What is denormalization?", a: "Adding redundancy to improve performance." },
          { q: "What is a transaction?", a: "A group of SQL operations that are executed as a single unit." },
          { q: "What are ACID properties?", a: "Atomicity, Consistency, Isolation, Durability." },
          { q: "What is the use of COMMIT?", a: "To save all changes made by the transaction." },
          { q: "What is ROLLBACK?", a: "To undo changes made in the current transaction." },
          { q: "What is GROUP BY?", a: "Used to group rows with the same values." },
          { q: "What is HAVING clause?", a: "Used to filter groups created by GROUP BY." },
          { q: "What is ORDER BY?", a: "Sorts the result-set by one or more columns." },
          { q: "What is the default port of MySQL?", a: "3306" },
          { q: "How to update a record?", a: "`UPDATE tablename SET column=value WHERE condition;`" },
          { q: "How to delete a record?", a: "`DELETE FROM tablename WHERE condition;`" },
          { q: "What is a UNIQUE constraint?", a: "Ensures all values in a column are unique." },
          { q: "How to rename a table?", a: "`RENAME TABLE old_name TO new_name;`" },
          { q: "What is the difference between CHAR and VARCHAR?", a: "CHAR is fixed length, VARCHAR is variable length." },
          { q: "What is AUTO_INCREMENT?", a: "Automatically generates a unique value for a column." },
          { q: "How to limit number of rows?", a: "`SELECT * FROM tablename LIMIT 10;`" },
          { q: "What is the IN operator?", a: "Used to specify multiple possible values for a column." },
          { q: "What is BETWEEN operator?", a: "Used to filter within a range." },
          { q: "What is LIKE operator?", a: "Used to search for a pattern." },
          { q: "What is a view?", a: "A virtual table based on the result-set of a query." },
          { q: "What is a stored procedure?", a: "A saved SQL query that can be reused." },
          { q: "How to call a stored procedure?", a: "`CALL procedure_name();`" },
          { q: "What is a trigger?", a: "SQL code that automatically runs in response to events." },
          { q: "What is NULL?", a: "Represents missing or undefined data." },
          { q: "Difference between IS NULL and = NULL?", a: "`IS NULL` checks for null, `= NULL` is invalid." },
          { q: "How to create a user?", a: "`CREATE USER 'user'@'host' IDENTIFIED BY 'pass';`" },
          { q: "How to grant privileges?", a: "`GRANT ALL ON db.* TO 'user'@'host';`" },
          { q: "How to revoke privileges?", a: "`REVOKE ALL ON db.* FROM 'user'@'host';`" },
          { q: "What is the default storage engine in MySQL?", a: "InnoDB" },
          { q: "What is MyISAM?", a: "An older storage engine in MySQL." },
          { q: "What is the difference between InnoDB and MyISAM?", a: "InnoDB supports transactions and foreign keys; MyISAM doesn't." }], mongodb: [], redis: [],
        docker: [], kubernetes: [], aws: [], terraform: [],
        azure: [], googlecloud: [], serverless: [],
        networksecurity: [], firewalls: [], owasp: [],
        metasploit: [], wireshark: [],
        jest: [], cypress: [], selenium: [],
        git: [], github: [], ssh: [],
        reactnative: [], flutter: [], swift: [],
        agile: [], scrum: [], kanban: [],
        postman: [], vscode: [], figma: [],
        mern: [], farm: [], mean: [], jamstack: [],
      
        // You can normalize keys like this:
        "project-management": [], "cloud": [], "testing": [], "tools": [], "stack": [],
      };
      


const Questions = () => {
  const { topic } = useParams();
  const questions = questionBank[topic.toLowerCase()] || [];

  const [openIndex, setOpenIndex] = useState(null);

  const toggleAnswer = (index) => {
    setOpenIndex(openIndex === index ? null : index);
  };

  return (
    <section className="min-h-screen py-12 px-4 sm:px-8 bg-gray-900 text-white">
      <h2 className="text-3xl sm:text-4xl font-bold text-center mb-10 text-purple-400 capitalize">
        {topic} Questions
      </h2>

      {questions.length === 0 ? (
        <p className="text-center text-gray-400">No questions found for this topic.</p>
      ) : (
        <div className="max-w-4xl mx-auto space-y-4">
          {questions.map((item, index) => (
            <div
              key={index}
              className="bg-gray-800 rounded-lg shadow-md overflow-hidden transition-all duration-300"
            >
              <button
                className="w-full flex justify-between items-center p-4 font-semibold text-left hover:bg-purple-800 transition"
                onClick={() => toggleAnswer(index)}
              >
                {item.q}
                {openIndex === index ? <FaChevronUp /> : <FaChevronDown />}
              </button>
              {openIndex === index && (
                <div className="px-4 pb-4 text-gray-300">{item.a}</div>
              )}
            </div>
          ))}
        </div>
      )}
    </section>
  );
};

export default Questions;
